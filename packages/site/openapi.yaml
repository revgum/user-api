openapi: 3.1.0
info:
  title: User API
  version: 1.0.0
  description: API for managing users
servers:
  - url: https://api.example.com/v1
tags:
  - name: users
    description: V1 API
paths:
  /users:
    post:
      tags:
        - users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateInput"
      responses:
        "201":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/ServiceErrorResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedErrorResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
        "422":
          description: User create failed, unprocessable entity
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Meta"
                  - $ref: "#/components/schemas/ServiceError"
      security:
        - Bearer: []
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: The ID of the user
        schema:
          type: string
    get:
      tags:
        - users
      summary: Retrieve a user by ID
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/ServiceErrorResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedErrorResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
      security:
        - Bearer: []
    patch:
      tags:
        - users
      summary: Update an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateInput"
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/ServiceErrorResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedErrorResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
      security:
        - Bearer: []
    put:
      tags:
        - users
      summary: Update an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateInput"
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/ServiceErrorResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedErrorResponse"
        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
      security:
        - Bearer: []
    delete:
      tags:
        - users
      summary: Delete a user
      responses:
        "204":
          $ref: "#/components/responses/MessageResponse"
        "400":
          $ref: "#/components/responses/ServiceErrorResponse"
        "403":
          $ref: "#/components/responses/NotAuthorizedErrorResponse"
        "500":
          $ref: "#/components/responses/InternalErrorResponse"
      security:
        - Bearer: []
components:
  responses:
    UserResponse:
      description: A user
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Meta"
              - $ref: "#/components/schemas/User"
    MessageResponse:
      description: A message
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Meta"
              - $ref: "#/components/schemas/User"
    NotAuthorizedErrorResponse:
      description: API authorization failed, forbidden access
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Meta"
              - $ref: "#/components/schemas/ServiceError"
    NotFoundErrorResponse:
      description: Resource not found
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Meta"
              - $ref: "#/components/schemas/ServiceError"
    ServiceErrorResponse:
      description: API error
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Meta"
              - $ref: "#/components/schemas/ServiceError"
    InternalErrorResponse:
      description: Internal server error
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/Meta"
              - $ref: "#/components/schemas/ServiceError"
  schemas:
    Meta:
      type: object
      properties:
        meta:
          type: object
          properties:
            version:
              type: string
              default: 1.0.0
            requestId:
              type: string
          required:
            - version
            - requestId
      required:
        - meta
    User:
      type: object
      description: |
        A User may have up to 3 unique email addresses. Email addresses can be added but not removed from a User.
      properties:
        user:
          type: object
          properties:
            userId:
              type: string
              description: Must be a base64 urlencoded value.
              examples:
                - my-user-id
            name:
              type: string
              examples:
                - My Name
            dob:
              type: string
              description: Must be in YYYY-MM-DD format.
              examples:
                - 1902-01-21
            emails:
              type: array
              description: Must be formatted as valid email addresses.
              items:
                type: string
              maxItems: 3
              uniqueItems: true
              examples:
                - '["email@example.com"]'
          required:
            - userId
            - name
            - emails
      required:
        - user
    UserCreateInput:
      type: object
      properties:
        userId:
          type: string
          description: Must be a base64 urlencoded value.
          examples:
            - my-user-id
        name:
          type: string
          examples:
            - My Name
        dob:
          type: string
          description: Must be in YYYY-MM-DD format.
          examples:
            - 1902-01-21
        emails:
          type: array
          description: Must be formatted as valid email addresses.
          items:
            type: string
          maxItems: 3
          uniqueItems: true
          examples:
            - '["email@example.com"]'
      required:
        - userId
        - name
        - emails
    UserUpdateInput:
      type: object
      properties:
        userId:
          type: string
          description: Must be a base64 urlencoded value.
          examples:
            - my-user-id
        name:
          type: string
          examples:
            - My Name
        dob:
          type: string
          description: Must be in YYYY-MM-DD format.
          examples:
            - 1902-01-21
        emails:
          type: array
          description: Must be formatted as valid email addresses.
          items:
            type: string
          maxItems: 3
          uniqueItems: true
          examples:
            - '["email@example.com"]'
    Message:
      type: object
      properties:
        message:
          type: string
          examples:
            - User was deleted
      required:
        - message
    ServiceError:
      type: object
      properties:
        error:
          type: object
          properties:
            detail:
              type: string
            errorCode:
              type: string
              oneOf:
                - title: api.authentication.failed
                  const: api.authentication.failed
                  description: The API key supplied was invalid or incorrect.
                - title: api.authorization.missing
                  const: api.authorization.missing
                  description: An API key was not provided.
                - title: api.request.invalid
                  const: api.request.invalid
                  description: The API request content could not be parsed.
                - title: api.request.missing
                  const: api.request.missing
                  description: The API request did not include content.
                - title: api.validation.failed
                  const: api.validation.failed
                  description: The API request content did not match the allowed spec.
                - title: api.validation.invalid
                  const: api.validation.invalid
                  description: The API request content failed to parse.
                - title: entity.action.failed
                  const: entity.action.failed
                  description: The entity failed during persistence.
                - title: entity.condition-check.failed
                  const: entity.condition-check.failed
                  description: The entity failed to persist during a condition check, such as detecting that a record already exists.
                - title: entity.invalid
                  const: entity.invalid
                  description: The entity failed during schema validation.
                - title: entity.not-found
                  const: entity.not-found
                  description: The entity requested was not found.
                - title: entity.parsing.failed
                  const: entity.parsing.failed
                  description: The entity included an invalid property.
                - title: entity.validation.failed
                  const: entity.validation.failed
                  description: The entity included a property that failed validation, such as validating the maximum number of allowed values for a field.
                - title: general.error
                  const: general.error
                  description: A general error response.
            statusCode:
              type: string
            title:
              type: string
            causedBy:
              type: array
              items:
                type: object
                properties:
                  title:
                    type: string
                  detail:
                    type: string
                  code:
                    type: string
          required:
            - detail
            - errorCode
            - statusCode
            - title
      required:
        - error
  securitySchemes:
    Bearer:
      type: apiKey
      name: Authorization
      in: header
